
#define DYNAMIX_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_CONST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const %{args_coma})

#define DYNAMIX_MULTICAST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_CONST_MULTICAST_MESSAGE_%{arity}(return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const %{args_coma})

#define DYNAMIX_EXPORTED_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_EXPORTED_CONST_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(export, message, message, return_type, const %{args_coma})

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_%{arity}(export, return_type, message %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(export, message, message, return_type, const %{args_coma})

#define DYNAMIX_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_CONST_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const %{args_coma})

#define DYNAMIX_MULTICAST_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_CONST_MULTICAST_MESSAGE_%{arity}_OVERLOAD(message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const %{args_coma})

#define DYNAMIX_EXPORTED_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_EXPORTED_CONST_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_UNI(export, message_name, method_name, return_type, const %{args_coma})

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() %{args_coma})

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_%{arity}_OVERLOAD(export, message_name, return_type, method_name %{args_coma}) \
    I_DYNAMIX_MESSAGE%{arity}_MULTI(export, message_name, method_name, return_type, const %{args_coma})

#define DYNAMIX_DEFINE_MESSAGE_%{arity}_WITH_DEFAULT_IMPL(return_type, message_name %{args_coma}) \
    /* check for correct type */ \
    static_assert(std::is_same<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::caller_func, return_type(*)(void* %{coma_arg_types})>::value, \
        "The default implementation must have the same signature as the message."); \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(%{args_signature}); \
        static return_type caller(void* self %{coma_args_signature}) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(%{fwd_args}); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl(%{args_signature})
